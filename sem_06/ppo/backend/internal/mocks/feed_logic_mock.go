package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/keo20u511/ppo/backend/internal/interfaces.FeedLogic -o ./internal/mocks/feed_logic_mock_test.go -n FeedLogicMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/keo20u511/ppo/backend/internal/logic/models"
	"github.com/gojuno/minimock/v3"
)

// FeedLogicMock implements interfaces.FeedLogic
type FeedLogicMock struct {
	t minimock.Tester

	funcView          func(ctx context.Context) (ppa1 []*models.Post, ppa2 []*models.Post, err error)
	inspectFuncView   func(ctx context.Context)
	afterViewCounter  uint64
	beforeViewCounter uint64
	ViewMock          mFeedLogicMockView
}

// NewFeedLogicMock returns a mock for interfaces.FeedLogic
func NewFeedLogicMock(t minimock.Tester) *FeedLogicMock {
	m := &FeedLogicMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ViewMock = mFeedLogicMockView{mock: m}
	m.ViewMock.callArgs = []*FeedLogicMockViewParams{}

	return m
}

type mFeedLogicMockView struct {
	mock               *FeedLogicMock
	defaultExpectation *FeedLogicMockViewExpectation
	expectations       []*FeedLogicMockViewExpectation

	callArgs []*FeedLogicMockViewParams
	mutex    sync.RWMutex
}

// FeedLogicMockViewExpectation specifies expectation struct of the FeedLogic.View
type FeedLogicMockViewExpectation struct {
	mock    *FeedLogicMock
	params  *FeedLogicMockViewParams
	results *FeedLogicMockViewResults
	Counter uint64
}

// FeedLogicMockViewParams contains parameters of the FeedLogic.View
type FeedLogicMockViewParams struct {
	ctx context.Context
}

// FeedLogicMockViewResults contains results of the FeedLogic.View
type FeedLogicMockViewResults struct {
	ppa1 []*models.Post
	ppa2 []*models.Post
	err  error
}

// Expect sets up expected params for FeedLogic.View
func (mmView *mFeedLogicMockView) Expect(ctx context.Context) *mFeedLogicMockView {
	if mmView.mock.funcView != nil {
		mmView.mock.t.Fatalf("FeedLogicMock.View mock is already set by Set")
	}

	if mmView.defaultExpectation == nil {
		mmView.defaultExpectation = &FeedLogicMockViewExpectation{}
	}

	mmView.defaultExpectation.params = &FeedLogicMockViewParams{ctx}
	for _, e := range mmView.expectations {
		if minimock.Equal(e.params, mmView.defaultExpectation.params) {
			mmView.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmView.defaultExpectation.params)
		}
	}

	return mmView
}

// Inspect accepts an inspector function that has same arguments as the FeedLogic.View
func (mmView *mFeedLogicMockView) Inspect(f func(ctx context.Context)) *mFeedLogicMockView {
	if mmView.mock.inspectFuncView != nil {
		mmView.mock.t.Fatalf("Inspect function is already set for FeedLogicMock.View")
	}

	mmView.mock.inspectFuncView = f

	return mmView
}

// Return sets up results that will be returned by FeedLogic.View
func (mmView *mFeedLogicMockView) Return(ppa1 []*models.Post, ppa2 []*models.Post, err error) *FeedLogicMock {
	if mmView.mock.funcView != nil {
		mmView.mock.t.Fatalf("FeedLogicMock.View mock is already set by Set")
	}

	if mmView.defaultExpectation == nil {
		mmView.defaultExpectation = &FeedLogicMockViewExpectation{mock: mmView.mock}
	}
	mmView.defaultExpectation.results = &FeedLogicMockViewResults{ppa1, ppa2, err}
	return mmView.mock
}

// Set uses given function f to mock the FeedLogic.View method
func (mmView *mFeedLogicMockView) Set(f func(ctx context.Context) (ppa1 []*models.Post, ppa2 []*models.Post, err error)) *FeedLogicMock {
	if mmView.defaultExpectation != nil {
		mmView.mock.t.Fatalf("Default expectation is already set for the FeedLogic.View method")
	}

	if len(mmView.expectations) > 0 {
		mmView.mock.t.Fatalf("Some expectations are already set for the FeedLogic.View method")
	}

	mmView.mock.funcView = f
	return mmView.mock
}

// When sets expectation for the FeedLogic.View which will trigger the result defined by the following
// Then helper
func (mmView *mFeedLogicMockView) When(ctx context.Context) *FeedLogicMockViewExpectation {
	if mmView.mock.funcView != nil {
		mmView.mock.t.Fatalf("FeedLogicMock.View mock is already set by Set")
	}

	expectation := &FeedLogicMockViewExpectation{
		mock:   mmView.mock,
		params: &FeedLogicMockViewParams{ctx},
	}
	mmView.expectations = append(mmView.expectations, expectation)
	return expectation
}

// Then sets up FeedLogic.View return parameters for the expectation previously defined by the When method
func (e *FeedLogicMockViewExpectation) Then(ppa1 []*models.Post, ppa2 []*models.Post, err error) *FeedLogicMock {
	e.results = &FeedLogicMockViewResults{ppa1, ppa2, err}
	return e.mock
}

// View implements interfaces.FeedLogic
func (mmView *FeedLogicMock) View(ctx context.Context) (ppa1 []*models.Post, ppa2 []*models.Post, err error) {
	mm_atomic.AddUint64(&mmView.beforeViewCounter, 1)
	defer mm_atomic.AddUint64(&mmView.afterViewCounter, 1)

	if mmView.inspectFuncView != nil {
		mmView.inspectFuncView(ctx)
	}

	mm_params := &FeedLogicMockViewParams{ctx}

	// Record call args
	mmView.ViewMock.mutex.Lock()
	mmView.ViewMock.callArgs = append(mmView.ViewMock.callArgs, mm_params)
	mmView.ViewMock.mutex.Unlock()

	for _, e := range mmView.ViewMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.ppa2, e.results.err
		}
	}

	if mmView.ViewMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmView.ViewMock.defaultExpectation.Counter, 1)
		mm_want := mmView.ViewMock.defaultExpectation.params
		mm_got := FeedLogicMockViewParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmView.t.Errorf("FeedLogicMock.View got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmView.ViewMock.defaultExpectation.results
		if mm_results == nil {
			mmView.t.Fatal("No results are set for the FeedLogicMock.View")
		}
		return (*mm_results).ppa1, (*mm_results).ppa2, (*mm_results).err
	}
	if mmView.funcView != nil {
		return mmView.funcView(ctx)
	}
	mmView.t.Fatalf("Unexpected call to FeedLogicMock.View. %v", ctx)
	return
}

// ViewAfterCounter returns a count of finished FeedLogicMock.View invocations
func (mmView *FeedLogicMock) ViewAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmView.afterViewCounter)
}

// ViewBeforeCounter returns a count of FeedLogicMock.View invocations
func (mmView *FeedLogicMock) ViewBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmView.beforeViewCounter)
}

// Calls returns a list of arguments used in each call to FeedLogicMock.View.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmView *mFeedLogicMockView) Calls() []*FeedLogicMockViewParams {
	mmView.mutex.RLock()

	argCopy := make([]*FeedLogicMockViewParams, len(mmView.callArgs))
	copy(argCopy, mmView.callArgs)

	mmView.mutex.RUnlock()

	return argCopy
}

// MinimockViewDone returns true if the count of the View invocations corresponds
// the number of defined expectations
func (m *FeedLogicMock) MinimockViewDone() bool {
	for _, e := range m.ViewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ViewMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterViewCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcView != nil && mm_atomic.LoadUint64(&m.afterViewCounter) < 1 {
		return false
	}
	return true
}

// MinimockViewInspect logs each unmet expectation
func (m *FeedLogicMock) MinimockViewInspect() {
	for _, e := range m.ViewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FeedLogicMock.View with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ViewMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterViewCounter) < 1 {
		if m.ViewMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FeedLogicMock.View")
		} else {
			m.t.Errorf("Expected call to FeedLogicMock.View with params: %#v", *m.ViewMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcView != nil && mm_atomic.LoadUint64(&m.afterViewCounter) < 1 {
		m.t.Error("Expected call to FeedLogicMock.View")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FeedLogicMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockViewInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FeedLogicMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FeedLogicMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockViewDone()
}
