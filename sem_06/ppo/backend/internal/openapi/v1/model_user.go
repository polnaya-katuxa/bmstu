/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type User struct {
	Id string `json:"id"`

	Login string `json:"login"`

	Picture string `json:"picture"`

	Description string `json:"description"`

	Balance int32 `json:"balance"`

	Mail string `json:"mail"`

	IsAdmin bool `json:"isAdmin"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"id":          obj.Id,
		"login":       obj.Login,
		"picture":     obj.Picture,
		"description": obj.Description,
		"balance":     obj.Balance,
		"mail":        obj.Mail,
		"isAdmin":     obj.IsAdmin,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
