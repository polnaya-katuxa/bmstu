/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Post struct {
	Id string `json:"id"`

	Content string `json:"content"`

	PubTime string `json:"pubTime"`

	Author User `json:"author"`

	CommentsNum int32 `json:"commentsNum"`

	Reactions []Reaction `json:"reactions"`

	Perms bool `json:"perms"`
}

// AssertPostRequired checks if the required fields are not zero-ed
func AssertPostRequired(obj Post) error {
	elements := map[string]interface{}{
		"id":          obj.Id,
		"content":     obj.Content,
		"pubTime":     obj.PubTime,
		"author":      obj.Author,
		"commentsNum": obj.CommentsNum,
		"reactions":   obj.Reactions,
		"perms":       obj.Perms,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertUserRequired(obj.Author); err != nil {
		return err
	}
	for _, el := range obj.Reactions {
		if err := AssertReactionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecursePostRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Post (e.g. [][]Post), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePostRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPost, ok := obj.(Post)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPostRequired(aPost)
	})
}
