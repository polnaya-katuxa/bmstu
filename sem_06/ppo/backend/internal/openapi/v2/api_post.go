/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostApiController binds http requests to an api service and writes the service results to the http response
type PostApiController struct {
	service      PostApiServicer
	errorHandler ErrorHandler
}

// PostApiOption for how the controller is set up.
type PostApiOption func(*PostApiController)

// WithPostApiErrorHandler inject ErrorHandler into controller
func WithPostApiErrorHandler(h ErrorHandler) PostApiOption {
	return func(c *PostApiController) {
		c.errorHandler = h
	}
}

// NewPostApiController creates a default api controller
func NewPostApiController(s PostApiServicer, opts ...PostApiOption) Router {
	controller := &PostApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostApiController
func (c *PostApiController) Routes() Routes {
	return Routes{
		{
			"ChangePostPerms",
			strings.ToUpper("Patch"),
			"/posts/{id}/perms",
			c.ChangePostPerms,
		},
		{
			"DeletePost",
			strings.ToUpper("Delete"),
			"/posts/{id}",
			c.DeletePost,
		},
		{
			"GetPost",
			strings.ToUpper("Get"),
			"/posts/{id}",
			c.GetPost,
		},
		{
			"GetPosts",
			strings.ToUpper("Get"),
			"/posts",
			c.GetPosts,
		},
		{
			"PublishPost",
			strings.ToUpper("Post"),
			"/posts",
			c.PublishPost,
		},
	}
}

// ChangePostPerms - change perms for post by id
func (c *PostApiController) ChangePostPerms(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.ChangePostPerms(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePost - delete post by id
func (c *PostApiController) DeletePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DeletePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPost - get post by id
func (c *PostApiController) GetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPosts - get posts (feed or profile)
func (c *PostApiController) GetPosts(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	userParam := query.Get("user")
	feedForParam := query.Get("feed_for")
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	numParam, err := parseInt32Parameter(query.Get("num"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetPosts(r.Context(), userParam, feedForParam, pageParam, numParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PublishPost - publish post
func (c *PostApiController) PublishPost(w http.ResponseWriter, r *http.Request) {
	publishRequestParam := PublishRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&publishRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPublishRequestRequired(publishRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PublishPost(r.Context(), publishRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
