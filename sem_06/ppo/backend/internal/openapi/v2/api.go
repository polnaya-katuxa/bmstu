/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)

// CommentApiRouter defines the required methods for binding the api requests to a responses for the CommentApi
// The CommentApiRouter implementation should parse necessary information from the http request,
// pass the data to a CommentApiServicer to perform the required actions, then write the service results to the http response.
type CommentApiRouter interface {
	Comment(http.ResponseWriter, *http.Request)
	GetComments(http.ResponseWriter, *http.Request)
	Uncomment(http.ResponseWriter, *http.Request)
}

// PostApiRouter defines the required methods for binding the api requests to a responses for the PostApi
// The PostApiRouter implementation should parse necessary information from the http request,
// pass the data to a PostApiServicer to perform the required actions, then write the service results to the http response.
type PostApiRouter interface {
	ChangePostPerms(http.ResponseWriter, *http.Request)
	DeletePost(http.ResponseWriter, *http.Request)
	GetPost(http.ResponseWriter, *http.Request)
	GetPosts(http.ResponseWriter, *http.Request)
	PublishPost(http.ResponseWriter, *http.Request)
}

// ReactionApiRouter defines the required methods for binding the api requests to a responses for the ReactionApi
// The ReactionApiRouter implementation should parse necessary information from the http request,
// pass the data to a ReactionApiServicer to perform the required actions, then write the service results to the http response.
type ReactionApiRouter interface {
	React(http.ResponseWriter, *http.Request)
	Unreact(http.ResponseWriter, *http.Request)
}

// SubscriberApiRouter defines the required methods for binding the api requests to a responses for the SubscriberApi
// The SubscriberApiRouter implementation should parse necessary information from the http request,
// pass the data to a SubscriberApiServicer to perform the required actions, then write the service results to the http response.
type SubscriberApiRouter interface {
	Subscribe(http.ResponseWriter, *http.Request)
	Unsubscribe(http.ResponseWriter, *http.Request)
}

// UserApiRouter defines the required methods for binding the api requests to a responses for the UserApi
// The UserApiRouter implementation should parse necessary information from the http request,
// pass the data to a UserApiServicer to perform the required actions, then write the service results to the http response.
type UserApiRouter interface {
	DeleteUser(http.ResponseWriter, *http.Request)
	GetCurrentUser(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
	Login(http.ResponseWriter, *http.Request)
	Logout(http.ResponseWriter, *http.Request)
	Register(http.ResponseWriter, *http.Request)
}

// CommentApiServicer defines the api actions for the CommentApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CommentApiServicer interface {
	Comment(context.Context, string, CommentRequest) (ImplResponse, error)
	GetComments(context.Context, string, int32, int32) (ImplResponse, error)
	Uncomment(context.Context, string, string) (ImplResponse, error)
}

// PostApiServicer defines the api actions for the PostApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PostApiServicer interface {
	ChangePostPerms(context.Context, string) (ImplResponse, error)
	DeletePost(context.Context, string) (ImplResponse, error)
	GetPost(context.Context, string) (ImplResponse, error)
	GetPosts(context.Context, string, string, int32, int32) (ImplResponse, error)
	PublishPost(context.Context, PublishRequest) (ImplResponse, error)
}

// ReactionApiServicer defines the api actions for the ReactionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ReactionApiServicer interface {
	React(context.Context, string, ReactRequest) (ImplResponse, error)
	Unreact(context.Context, string, string) (ImplResponse, error)
}

// SubscriberApiServicer defines the api actions for the SubscriberApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SubscriberApiServicer interface {
	Subscribe(context.Context, string) (ImplResponse, error)
	Unsubscribe(context.Context, string, string) (ImplResponse, error)
}

// UserApiServicer defines the api actions for the UserApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserApiServicer interface {
	DeleteUser(context.Context, string) (ImplResponse, error)
	GetCurrentUser(context.Context) (ImplResponse, error)
	GetUser(context.Context, string) (ImplResponse, error)
	GetUsers(context.Context, int32, int32) (ImplResponse, error)
	Login(context.Context, LoginRequest) (ImplResponse, error)
	Logout(context.Context) (ImplResponse, error)
	Register(context.Context, RegisterRequest) (ImplResponse, error)
}
