/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ReactionApiController binds http requests to an api service and writes the service results to the http response
type ReactionApiController struct {
	service      ReactionApiServicer
	errorHandler ErrorHandler
}

// ReactionApiOption for how the controller is set up.
type ReactionApiOption func(*ReactionApiController)

// WithReactionApiErrorHandler inject ErrorHandler into controller
func WithReactionApiErrorHandler(h ErrorHandler) ReactionApiOption {
	return func(c *ReactionApiController) {
		c.errorHandler = h
	}
}

// NewReactionApiController creates a default api controller
func NewReactionApiController(s ReactionApiServicer, opts ...ReactionApiOption) Router {
	controller := &ReactionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReactionApiController
func (c *ReactionApiController) Routes() Routes {
	return Routes{
		{
			"React",
			strings.ToUpper("Post"),
			"/posts/{id}/reactions",
			c.React,
		},
		{
			"Unreact",
			strings.ToUpper("Delete"),
			"/posts/{id}/reactions/{type_id}",
			c.Unreact,
		},
	}
}

// React - react to post by id
func (c *ReactionApiController) React(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	reactRequestParam := ReactRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&reactRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReactRequestRequired(reactRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.React(r.Context(), idParam, reactRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Unreact - unreact post by id
func (c *ReactionApiController) Unreact(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	typeIdParam := params["type_id"]
	result, err := c.service.Unreact(r.Context(), idParam, typeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
