/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"

	"git.iu7.bmstu.ru/keo20u511/ppo/backend/internal/interfaces"
	"github.com/google/uuid"
)

// ReactionApiService is a service that implements the logic for the ReactionApiServicer
// This service should implement the business logic for every endpoint for the ReactionApi API.
// Include any external packages or services that will be required by this service.
type ReactionApiService struct {
	postLogic interfaces.IPostLogic
}

// NewReactionApiService creates a default api service
func NewReactionApiService(postLogic interfaces.IPostLogic) ReactionApiServicer {
	return &ReactionApiService{postLogic: postLogic}
}

// React - react to post by id
func (s *ReactionApiService) React(ctx context.Context, id string, reactRequest ReactRequest) (ImplResponse, error) {
	postID, err := uuid.Parse(id)
	if err != nil {
		return toErrorResponse(err, "Invalid data.")
	}

	typeID, err := uuid.Parse(reactRequest.TypeID)
	if err != nil {
		return toErrorResponse(err, "Invalid data.")
	}

	reacted, err := s.postLogic.React(ctx, postID, typeID)
	if err != nil {
		return toErrorResponse(err, "Cannot react to post.")
	}

	return Response(http.StatusOK, ReactResponse{Reacted: reacted}), nil
}

// Unreact - unreact post by id
func (s *ReactionApiService) Unreact(ctx context.Context, id string, typeId string) (ImplResponse, error) {
	postID, err := uuid.Parse(id)
	if err != nil {
		return toErrorResponse(err, "Invalid data.")
	}

	typeID, err := uuid.Parse(typeId)
	if err != nil {
		return toErrorResponse(err, "Invalid data.")
	}

	reacted, err := s.postLogic.React(ctx, postID, typeID)
	if err != nil {
		return toErrorResponse(err, "Cannot unreact post.")
	}

	return Response(http.StatusOK, ReactResponse{Reacted: reacted}), nil
}
