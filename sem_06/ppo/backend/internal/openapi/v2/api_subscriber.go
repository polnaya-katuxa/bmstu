/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubscriberApiController binds http requests to an api service and writes the service results to the http response
type SubscriberApiController struct {
	service      SubscriberApiServicer
	errorHandler ErrorHandler
}

// SubscriberApiOption for how the controller is set up.
type SubscriberApiOption func(*SubscriberApiController)

// WithSubscriberApiErrorHandler inject ErrorHandler into controller
func WithSubscriberApiErrorHandler(h ErrorHandler) SubscriberApiOption {
	return func(c *SubscriberApiController) {
		c.errorHandler = h
	}
}

// NewSubscriberApiController creates a default api controller
func NewSubscriberApiController(s SubscriberApiServicer, opts ...SubscriberApiOption) Router {
	controller := &SubscriberApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubscriberApiController
func (c *SubscriberApiController) Routes() Routes {
	return Routes{
		{
			"Subscribe",
			strings.ToUpper("Post"),
			"/users/{id}/subscribers",
			c.Subscribe,
		},
		{
			"Unsubscribe",
			strings.ToUpper("Delete"),
			"/users/{id}/subscribers/{subscriber_id}",
			c.Unsubscribe,
		},
	}
}

// Subscribe - subscribe by id
func (c *SubscriberApiController) Subscribe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.Subscribe(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Unsubscribe - unsubscribe by id
func (c *SubscriberApiController) Unsubscribe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	subscriberIdParam := params["subscriber_id"]
	result, err := c.service.Unsubscribe(r.Context(), idParam, subscriberIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
