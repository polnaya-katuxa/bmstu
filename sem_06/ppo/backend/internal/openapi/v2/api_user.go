/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserApiController binds http requests to an api service and writes the service results to the http response
type UserApiController struct {
	service      UserApiServicer
	errorHandler ErrorHandler
}

// UserApiOption for how the controller is set up.
type UserApiOption func(*UserApiController)

// WithUserApiErrorHandler inject ErrorHandler into controller
func WithUserApiErrorHandler(h ErrorHandler) UserApiOption {
	return func(c *UserApiController) {
		c.errorHandler = h
	}
}

// NewUserApiController creates a default api controller
func NewUserApiController(s UserApiServicer, opts ...UserApiOption) Router {
	controller := &UserApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserApiController
func (c *UserApiController) Routes() Routes {
	return Routes{
		{
			"DeleteUser",
			strings.ToUpper("Delete"),
			"/users/{login}",
			c.DeleteUser,
		},
		{
			"GetCurrentUser",
			strings.ToUpper("Get"),
			"/auth",
			c.GetCurrentUser,
		},
		{
			"GetUser",
			strings.ToUpper("Get"),
			"/users/{login}",
			c.GetUser,
		},
		{
			"GetUsers",
			strings.ToUpper("Get"),
			"/users",
			c.GetUsers,
		},
		{
			"Login",
			strings.ToUpper("Post"),
			"/auth",
			c.Login,
		},
		{
			"Logout",
			strings.ToUpper("Delete"),
			"/auth",
			c.Logout,
		},
		{
			"Register",
			strings.ToUpper("Post"),
			"/users",
			c.Register,
		},
	}
}

// DeleteUser - delete user by login
func (c *UserApiController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	loginParam := params["login"]
	result, err := c.service.DeleteUser(r.Context(), loginParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCurrentUser - get current user
func (c *UserApiController) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCurrentUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUser - get user by login
func (c *UserApiController) GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	loginParam := params["login"]
	result, err := c.service.GetUser(r.Context(), loginParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUsers - get all users
func (c *UserApiController) GetUsers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	numParam, err := parseInt32Parameter(query.Get("num"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetUsers(r.Context(), pageParam, numParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Login - login
func (c *UserApiController) Login(w http.ResponseWriter, r *http.Request) {
	loginRequestParam := LoginRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequestRequired(loginRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), loginRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Logout - logout
func (c *UserApiController) Logout(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Logout(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Register - register
func (c *UserApiController) Register(w http.ResponseWriter, r *http.Request) {
	registerRequestParam := RegisterRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registerRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisterRequestRequired(registerRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Register(r.Context(), registerRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
