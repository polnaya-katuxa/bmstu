/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CommentApiController binds http requests to an api service and writes the service results to the http response
type CommentApiController struct {
	service      CommentApiServicer
	errorHandler ErrorHandler
}

// CommentApiOption for how the controller is set up.
type CommentApiOption func(*CommentApiController)

// WithCommentApiErrorHandler inject ErrorHandler into controller
func WithCommentApiErrorHandler(h ErrorHandler) CommentApiOption {
	return func(c *CommentApiController) {
		c.errorHandler = h
	}
}

// NewCommentApiController creates a default api controller
func NewCommentApiController(s CommentApiServicer, opts ...CommentApiOption) Router {
	controller := &CommentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommentApiController
func (c *CommentApiController) Routes() Routes {
	return Routes{
		{
			"Comment",
			strings.ToUpper("Post"),
			"/posts/{id}/comments",
			c.Comment,
		},
		{
			"GetComments",
			strings.ToUpper("Get"),
			"/posts/{id}/comments",
			c.GetComments,
		},
		{
			"Uncomment",
			strings.ToUpper("Delete"),
			"/posts/{id}/comments/{comment_id}",
			c.Uncomment,
		},
	}
}

// Comment - comment post by id
func (c *CommentApiController) Comment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	commentRequestParam := CommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequestRequired(commentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Comment(r.Context(), idParam, commentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetComments - get comments for post by id
func (c *CommentApiController) GetComments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	numParam, err := parseInt32Parameter(query.Get("num"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetComments(r.Context(), idParam, pageParam, numParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Uncomment - uncomment post by id
func (c *CommentApiController) Uncomment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	commentIdParam := params["comment_id"]
	result, err := c.service.Uncomment(r.Context(), idParam, commentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
