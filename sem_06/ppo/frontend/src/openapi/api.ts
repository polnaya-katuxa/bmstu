/* tslint:disable */
/* eslint-disable */
/**
 * API for ppo project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ChangePermsResponse
 */
export interface ChangePermsResponse {
    /**
     * 
     * @type {string}
     * @memberof ChangePermsResponse
     */
    'changed': string;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'pubTime': string;
    /**
     * 
     * @type {User}
     * @memberof Comment
     */
    'commentator': User;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'postID': string;
}
/**
 * 
 * @export
 * @interface CommentRequest
 */
export interface CommentRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentRequest
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface CommentResponse
 */
export interface CommentResponse {
    /**
     * 
     * @type {Comment}
     * @memberof CommentResponse
     */
    'comment': Comment;
}
/**
 * 
 * @export
 * @interface DeletePostResponse
 */
export interface DeletePostResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeletePostResponse
     */
    'deleted': boolean;
}
/**
 * 
 * @export
 * @interface DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUserResponse
     */
    'deleted': boolean;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'systemMessage': string;
}
/**
 * 
 * @export
 * @interface GetCommentsResponse
 */
export interface GetCommentsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCommentsResponse
     */
    'total': number;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof GetCommentsResponse
     */
    'comments': Array<Comment>;
}
/**
 * 
 * @export
 * @interface GetPostResponse
 */
export interface GetPostResponse {
    /**
     * 
     * @type {Post}
     * @memberof GetPostResponse
     */
    'post': Post;
}
/**
 * 
 * @export
 * @interface GetPostsResponse
 */
export interface GetPostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetPostsResponse
     */
    'total': number;
    /**
     * 
     * @type {Array<Post>}
     * @memberof GetPostsResponse
     */
    'posts': Array<Post>;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {User}
     * @memberof GetUserResponse
     */
    'user': User;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserResponse
     */
    'subscribed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserResponse
     */
    'self': boolean;
}
/**
 * 
 * @export
 * @interface GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     * 
     * @type {number}
     * @memberof GetUsersResponse
     */
    'total': number;
    /**
     * 
     * @type {Array<User>}
     * @memberof GetUsersResponse
     */
    'users': Array<User>;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'pubTime': string;
    /**
     * 
     * @type {User}
     * @memberof Post
     */
    'author': User;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'commentsNum': number;
    /**
     * 
     * @type {Array<Reaction>}
     * @memberof Post
     */
    'reactions': Array<Reaction>;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    'perms': boolean;
}
/**
 * 
 * @export
 * @interface PublishRequest
 */
export interface PublishRequest {
    /**
     * 
     * @type {string}
     * @memberof PublishRequest
     */
    'content': string;
    /**
     * 
     * @type {boolean}
     * @memberof PublishRequest
     */
    'perms'?: boolean;
}
/**
 * 
 * @export
 * @interface PublishResponse
 */
export interface PublishResponse {
    /**
     * 
     * @type {Post}
     * @memberof PublishResponse
     */
    'post': Post;
    /**
     * 
     * @type {boolean}
     * @memberof PublishResponse
     */
    'published': boolean;
}
/**
 * 
 * @export
 * @interface ReactRequest
 */
export interface ReactRequest {
    /**
     * 
     * @type {string}
     * @memberof ReactRequest
     */
    'typeID': string;
}
/**
 * 
 * @export
 * @interface ReactResponse
 */
export interface ReactResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ReactResponse
     */
    'reacted': boolean;
}
/**
 * 
 * @export
 * @interface Reaction
 */
export interface Reaction {
    /**
     * 
     * @type {string}
     * @memberof Reaction
     */
    'icon': string;
    /**
     * 
     * @type {number}
     * @memberof Reaction
     */
    'num': number;
    /**
     * 
     * @type {string}
     * @memberof Reaction
     */
    'typeID': string;
    /**
     * 
     * @type {boolean}
     * @memberof Reaction
     */
    'yours': boolean;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'picture': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'mail': string;
}
/**
 * 
 * @export
 * @interface SubscribeResponse
 */
export interface SubscribeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SubscribeResponse
     */
    'subscribed': boolean;
}
/**
 * 
 * @export
 * @interface UncommentResponse
 */
export interface UncommentResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UncommentResponse
     */
    'uncommented': boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'picture': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'balance': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'mail': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isAdmin': boolean;
}
/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * 
     * @type {User}
     * @memberof UserInfoResponse
     */
    'user': User;
}

/**
 * CommentApi - axios parameter creator
 * @export
 */
export const CommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary comment post by id
         * @param {string} id 
         * @param {CommentRequest} commentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment: async (id: string, commentRequest: CommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('comment', 'id', id)
            // verify required parameter 'commentRequest' is not null or undefined
            assertParamExists('comment', 'commentRequest', commentRequest)
            const localVarPath = `/posts/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get comments for post by id
         * @param {string} id 
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments: async (id: string, page?: number, num?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getComments', 'id', id)
            const localVarPath = `/posts/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uncomment post by id
         * @param {string} id 
         * @param {string} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncomment: async (id: string, commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uncomment', 'id', id)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('uncomment', 'commentId', commentId)
            const localVarPath = `/posts/{id}/comments/{comment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentApi - functional programming interface
 * @export
 */
export const CommentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary comment post by id
         * @param {string} id 
         * @param {CommentRequest} commentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comment(id: string, commentRequest: CommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comment(id, commentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get comments for post by id
         * @param {string} id 
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComments(id: string, page?: number, num?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComments(id, page, num, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary uncomment post by id
         * @param {string} id 
         * @param {string} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uncomment(id: string, commentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UncommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uncomment(id, commentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommentApi - factory interface
 * @export
 */
export const CommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentApiFp(configuration)
    return {
        /**
         * 
         * @summary comment post by id
         * @param {string} id 
         * @param {CommentRequest} commentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comment(id: string, commentRequest: CommentRequest, options?: any): AxiosPromise<CommentResponse> {
            return localVarFp.comment(id, commentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get comments for post by id
         * @param {string} id 
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments(id: string, page?: number, num?: number, options?: any): AxiosPromise<GetCommentsResponse> {
            return localVarFp.getComments(id, page, num, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary uncomment post by id
         * @param {string} id 
         * @param {string} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncomment(id: string, commentId: string, options?: any): AxiosPromise<UncommentResponse> {
            return localVarFp.uncomment(id, commentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
export class CommentApi extends BaseAPI {
    /**
     * 
     * @summary comment post by id
     * @param {string} id 
     * @param {CommentRequest} commentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public comment(id: string, commentRequest: CommentRequest, options?: AxiosRequestConfig) {
        return CommentApiFp(this.configuration).comment(id, commentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get comments for post by id
     * @param {string} id 
     * @param {number} [page] Number of page
     * @param {number} [num] Num records on page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public getComments(id: string, page?: number, num?: number, options?: AxiosRequestConfig) {
        return CommentApiFp(this.configuration).getComments(id, page, num, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary uncomment post by id
     * @param {string} id 
     * @param {string} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public uncomment(id: string, commentId: string, options?: AxiosRequestConfig) {
        return CommentApiFp(this.configuration).uncomment(id, commentId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary change perms for post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePostPerms: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('changePostPerms', 'id', id)
            const localVarPath = `/posts/{id}/perms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePost', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPost', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get posts (feed or profile)
         * @param {string} [user] 
         * @param {string} [feedFor] 
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (user?: string, feedFor?: string, page?: number, num?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (feedFor !== undefined) {
                localVarQueryParameter['feed_for'] = feedFor;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary publish post
         * @param {PublishRequest} publishRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPost: async (publishRequest: PublishRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publishRequest' is not null or undefined
            assertParamExists('publishPost', 'publishRequest', publishRequest)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publishRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary change perms for post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePostPerms(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangePermsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePostPerms(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get posts (feed or profile)
         * @param {string} [user] 
         * @param {string} [feedFor] 
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(user?: string, feedFor?: string, page?: number, num?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(user, feedFor, page, num, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary publish post
         * @param {PublishRequest} publishRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPost(publishRequest: PublishRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPost(publishRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostApiFp(configuration)
    return {
        /**
         * 
         * @summary change perms for post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePostPerms(id: string, options?: any): AxiosPromise<ChangePermsResponse> {
            return localVarFp.changePostPerms(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(id: string, options?: any): AxiosPromise<DeletePostResponse> {
            return localVarFp.deletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get post by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(id: string, options?: any): AxiosPromise<GetPostResponse> {
            return localVarFp.getPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get posts (feed or profile)
         * @param {string} [user] 
         * @param {string} [feedFor] 
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(user?: string, feedFor?: string, page?: number, num?: number, options?: any): AxiosPromise<GetPostsResponse> {
            return localVarFp.getPosts(user, feedFor, page, num, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary publish post
         * @param {PublishRequest} publishRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPost(publishRequest: PublishRequest, options?: any): AxiosPromise<PublishResponse> {
            return localVarFp.publishPost(publishRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * 
     * @summary change perms for post by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public changePostPerms(id: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).changePostPerms(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete post by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public deletePost(id: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).deletePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get post by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPost(id: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get posts (feed or profile)
     * @param {string} [user] 
     * @param {string} [feedFor] 
     * @param {number} [page] Number of page
     * @param {number} [num] Num records on page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPosts(user?: string, feedFor?: string, page?: number, num?: number, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPosts(user, feedFor, page, num, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary publish post
     * @param {PublishRequest} publishRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public publishPost(publishRequest: PublishRequest, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).publishPost(publishRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReactionApi - axios parameter creator
 * @export
 */
export const ReactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary react to post by id
         * @param {string} id 
         * @param {ReactRequest} reactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        react: async (id: string, reactRequest: ReactRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('react', 'id', id)
            // verify required parameter 'reactRequest' is not null or undefined
            assertParamExists('react', 'reactRequest', reactRequest)
            const localVarPath = `/posts/{id}/reactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unreact post by id
         * @param {string} id 
         * @param {string} typeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unreact: async (id: string, typeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unreact', 'id', id)
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('unreact', 'typeId', typeId)
            const localVarPath = `/posts/{id}/reactions/{type_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type_id"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReactionApi - functional programming interface
 * @export
 */
export const ReactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary react to post by id
         * @param {string} id 
         * @param {ReactRequest} reactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async react(id: string, reactRequest: ReactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.react(id, reactRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary unreact post by id
         * @param {string} id 
         * @param {string} typeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unreact(id: string, typeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unreact(id, typeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReactionApi - factory interface
 * @export
 */
export const ReactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReactionApiFp(configuration)
    return {
        /**
         * 
         * @summary react to post by id
         * @param {string} id 
         * @param {ReactRequest} reactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        react(id: string, reactRequest: ReactRequest, options?: any): AxiosPromise<ReactResponse> {
            return localVarFp.react(id, reactRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unreact post by id
         * @param {string} id 
         * @param {string} typeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unreact(id: string, typeId: string, options?: any): AxiosPromise<ReactResponse> {
            return localVarFp.unreact(id, typeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReactionApi - object-oriented interface
 * @export
 * @class ReactionApi
 * @extends {BaseAPI}
 */
export class ReactionApi extends BaseAPI {
    /**
     * 
     * @summary react to post by id
     * @param {string} id 
     * @param {ReactRequest} reactRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    public react(id: string, reactRequest: ReactRequest, options?: AxiosRequestConfig) {
        return ReactionApiFp(this.configuration).react(id, reactRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unreact post by id
     * @param {string} id 
     * @param {string} typeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    public unreact(id: string, typeId: string, options?: AxiosRequestConfig) {
        return ReactionApiFp(this.configuration).unreact(id, typeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubscriberApi - axios parameter creator
 * @export
 */
export const SubscriberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary subscribe by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscribe', 'id', id)
            const localVarPath = `/users/{id}/subscribers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unsubscribe by id
         * @param {string} id 
         * @param {string} subscriberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe: async (id: string, subscriberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unsubscribe', 'id', id)
            // verify required parameter 'subscriberId' is not null or undefined
            assertParamExists('unsubscribe', 'subscriberId', subscriberId)
            const localVarPath = `/users/{id}/subscribers/{subscriber_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subscriber_id"}}`, encodeURIComponent(String(subscriberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriberApi - functional programming interface
 * @export
 */
export const SubscriberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriberApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary subscribe by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribe(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscribeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribe(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary unsubscribe by id
         * @param {string} id 
         * @param {string} subscriberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unsubscribe(id: string, subscriberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscribeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unsubscribe(id, subscriberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriberApi - factory interface
 * @export
 */
export const SubscriberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriberApiFp(configuration)
    return {
        /**
         * 
         * @summary subscribe by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe(id: string, options?: any): AxiosPromise<SubscribeResponse> {
            return localVarFp.subscribe(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unsubscribe by id
         * @param {string} id 
         * @param {string} subscriberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe(id: string, subscriberId: string, options?: any): AxiosPromise<SubscribeResponse> {
            return localVarFp.unsubscribe(id, subscriberId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriberApi - object-oriented interface
 * @export
 * @class SubscriberApi
 * @extends {BaseAPI}
 */
export class SubscriberApi extends BaseAPI {
    /**
     * 
     * @summary subscribe by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    public subscribe(id: string, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).subscribe(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unsubscribe by id
     * @param {string} id 
     * @param {string} subscriberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApi
     */
    public unsubscribe(id: string, subscriberId: string, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).unsubscribe(id, subscriberId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete user by login
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (login: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('deleteUser', 'login', login)
            const localVarPath = `/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get user by login
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (login: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getUser', 'login', login)
            const localVarPath = `/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all users
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (page?: number, num?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerRequest: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('register', 'registerRequest', registerRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete user by login
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(login: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get user by login
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(login: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get all users
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(page?: number, num?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(page, num, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerRequest: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary delete user by login
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(login: string, options?: any): AxiosPromise<DeleteUserResponse> {
            return localVarFp.deleteUser(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<UserInfoResponse> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get user by login
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(login: string, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.getUser(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get all users
         * @param {number} [page] Number of page
         * @param {number} [num] Num records on page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(page?: number, num?: number, options?: any): AxiosPromise<GetUsersResponse> {
            return localVarFp.getUsers(page, num, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary register
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerRequest: RegisterRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.register(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary delete user by login
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(login: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get user by login
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(login: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get all users
     * @param {number} [page] Number of page
     * @param {number} [num] Num records on page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(page?: number, num?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(page, num, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public login(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logout(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary register
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public register(registerRequest: RegisterRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).register(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


