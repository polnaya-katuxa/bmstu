1) fork с оптимизацией

Системный вызов fork() создаёт новый процесс - процесс-потомок, который является копией своего предка, так как наследует его код, дескрипторы открытых файлов, сигнальную маску и т.д. 
В старых UNIX код предка копировался в адресное пространство потомка. Для потомка создаётся собственное виртуальное адресное пространство, для этого создаются карты трансляции адресов (таблицы страниц). В результате в системе существовало несколько копий одной программы. 

Так как зачастую потомок сразу переходит на выполнение другой программы с помощью exec, такой метод был признан неэффективным.

fork был оптимизирован для новых систем.
fork так же создает процесс-потомок, для него создаются собственные таблицы страниц, но копирование не выполняется.
Его дескрипторы страниц ссылаются на адресное пространство предка. Страницы данных и стека родителя временно получают атрибут «только для чтения» и маркируются как «копируемые при записи» (флаг c-o-w). 

Если кто-то из них (родитель или потомок) попытается изменить страницу памяти, произойдет ошибочная исключительная ситуация по правам доступа, так как страницы доступны только для чтения. Затем ядро системы запустит обработчик исключительной ситуации, который обнаружит, что страница помечена как «копируемая при записи», и создаст новую ее новую копию, которую уже можно изменять.
Если потомок вызовет exec() или exit(), то защита страниц памяти вновь станет обычной, и флаг «копирования при записи» будет сброшен.

2) Сигналы

Сигналы - это средство взаимодействия процессов. Сигналы информируют процессы о событиях в системе.
События приводят к передаче сигнала. Пример: нажатие на горячую клавишу, завершение процесса.
Процесс может сам решать, как реагировать на полученный сигнал:
- игнорировать (не всегда можно)
- по умолчанию, как установлено в системе
- определить собственную реакцию, установив обработчик сигнала

Установить реакцию на поступление сигнала (обработчик) можно с помощью системного вызова signal() (имеется во всех UNIX):
func = signal(snum, function);
snum - номер обрабатываемого сигнала, function - адрес функции, которая должна быть выполнена при поступлении указанного сигнала (обработчик).
Если вместо function был указан ноль, то при поступлении сигнала snum выполнение процесса будет прервано аналогично вызову exit. Если указать единицу, данный сигнал будет проигнорирован, но это возможно не для всех процессов.
Возвращает указатель на предыдущий обработчик данного сигнала. Его можно использовать для восстановления обработчика сигнала. В случае невозможности использования старого обработчика вернёт значение SIG_ERR.

С помощью системного вызова kill() можно сгенерировать сигналы и передать их другим процессам: kill(pid, snum).
pid - идентификатор процесса, а snum - номер сигнала, который будет передан процессу. 
Если pid = 0, то сигнал передаётся всем процессам группы (с общим предком), если 1 - всем процессам, идентификатор пользователя которых равен идентификатору текущего выполнения процесса, который посылает сигнал.
